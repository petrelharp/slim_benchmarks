// execute with: eidos <path>/test_sum_logical.txt

y = runif(8000) < 0.5;	// modify the length of this vector to scale the test

for (rep in 1:3) {
	start = clock("mono");
	for (i in 1:1000000) x = sum(y);
	print(clock("mono") - start);
}


// BCH 7/5/2019: Timing with Clang 8.0 on macOS 10.14.5, Xcode 10.2.1, on a 4-core MacBook Pro 2016,
// 2.9 GHz Intel Core i7, with hyperthreading (8 virtual cores)

// with 10 logicals: 0.31257 (1 thread via num_threads) vs. 1.95367 (8 threads)
// with 100 logicals: 0.355646 (1 thread via num_threads) vs. 1.94645 (8 threads)
// with 1000 logicals: 0.705019 (1 thread via num_threads) vs. 1.99593 (8 threads)
// with 2000 logicals: 1.03244 (1 thread via num_threads) vs. 2.15391 (8 threads)
// with 4000 logicals: 1.82308 (1 thread via num_threads) vs. 2.32188 (8 threads)
// with 6000 logicals: 2.55488 (1 thread via num_threads) vs. 2.52768 (8 threads)
// with 8000 logicals: 3.27299 (1 thread via num_threads) vs. 2.7156 (8 threads)
// with 10000 logicals: 3.96905 (1 thread via num_threads) vs. 2.90474 (8 threads)
// with 100000 logicals: 36.447 (1 thread via num_threads) vs. 11.8961 (8 threads)
